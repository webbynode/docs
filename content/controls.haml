--- 
title: Controls
---

%h2 Controls

%p
  Controls are the input parameters that your script takes. Each control has at least a name, a label and a type. A simple example of a control is:

%pre
  %code
    :preserve
      controls:
      - name: path
        label: Path to Install
        type: Textbox

%p
  Free-text control types, like Textbox, Numericbox or Password, can take one or more validation parameters that allow customization of which values are expected for the control.

%p
  On the other hand, list-based controls, like Radio and Combobox, require a list of options. 

%p
  Here's one example of a hypothetical config file with multiple controls of multiple types:

%pre
  %code
    :preserve
      --- 
      controls: 
      - name: grade
        label: Grade
        type: Textbox
        required: "true"
        validations: 
          maxlength: 1
          matches: ^[A|B|C]$
        validation_messages: 
          maxlength: must have 1 or less characters!
          matches: must be A, B or C
      - name: pass
        label: Pass?
        type: Radio
        required: "true"
        options: 
        - ['y', 'Yes']
        - ['n', 'No']
	
%p
  Fields for each control:

:markdown
  - **type:** the type of the control that will be rendered to the user. Accepted types: `Textbox`, `Numericbox`, `Password`, `Checkbox`, `Combobox`, `Radio`.    
  - **name:** control name, words must be separated by underscores	    
  - **label:** a label for the control 	    
  - **required:** indicates whether the control must have a value. Accepted values: `true` or `false`.	    
  - **validations:** a list of validations to apply to this control. The format of this field is always `type: value`.     
  - **validation_messages:** allows setting an error message for each validations in `validation`. Format is `type: message`.     


%h3 Validations

%p Here is a list of all available validations:

:erb
  <table class='items'> 
    <thead> 
      <tr> 
        <th class="validation">Validation</th> 
        <th class="description">Description</th> 
        <th class="example">Example</th> 
      </tr> 
    </thead> 
    <tbody> 
      <tr> 
        <td class="validation">minlength</td> 
        <td class="description">Minimum length of input</td> 
        <td class="example"><code>minlength: 8</code></td> 
      </tr> 
      <tr> 
        <td class="validation">maxlength</td> 
        <td class="description">Maximum length of input</td> 
        <td class="example"><code>maxlength: 20</code></td> 
      </tr> 
      <tr> 
        <td class="validation">rangelength</td> 
        <td class="description">Array with min and max length of input</td> 
        <td class="example"><code>rangelength: [8, 20]</code></td> 
      </tr> 
      <tr> 
        <td class="validation">min</td> 
        <td class="description">Requires a given numeric minimum</td> 
        <td class="example"><code>min: 1</code></td> 
      </tr> 
      <tr> 
        <td class="validation">max</td> 
        <td class="description">Requires a given numeric maximum</td> 
        <td class="example"><code>max: 9</code></td> 
      </tr> 
      <tr> 
        <td class="validation">range</td> 
        <td class="description">Requires input to be in a given numeric min-max range</td> 
        <td class="example"><code>range: [1, 9]</code></td> 
      </tr> 
      <tr> 
        <td class="validation">email</td> 
        <td class="description">Value must have the format of an email address</td> 
        <td class="example"><code>email: true</code></td> 
      </tr> 
      <tr> 
        <td class="validation">url</td> 
        <td class="description">Value must have the format of a url</td> 
        <td class="example"><code>url: true</code></td> 
      </tr> 
      <tr> 
        <td class="validation">date</td> 
        <td class="description">Requires a date</td> 
        <td class="example"><code>date: true</code></td> 
      </tr> 
      <tr> 
        <td class="validation">dateISO</td> 
        <td class="description">Requires an ISO formatted date</td> 
        <td class="example"><code>dateISO: true</code></td> 
      </tr> 
      <tr> 
        <td class="validation">number</td> 
        <td class="description">Value must be a decimal number</td> 
        <td class="example"><code>number: true</code></td> 
      </tr> 
      <tr> 
        <td class="validation">digits</td> 
        <td class="description">Requires digits only</td> 
        <td class="example"><code>digits: true</code></td> 
      </tr> 
      <tr> 
        <td class="validation">equalTo</td> 
        <td class="description">Makes the input match another input</td> 
        <td class="example"><code>equalTo: #params_another_one</code></td> 
      </tr> 
      <tr> 
        <td class="validation">matches</td> 
        <td class="description">When everything else fails, you can use matches and pass a Regex</td> 
        <td class="example"><code>matches: ^A</code></td> 
      </tr> 
    </tbody> 
  </table>
